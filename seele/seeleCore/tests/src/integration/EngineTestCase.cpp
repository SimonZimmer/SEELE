#include <gtest/gtest.h>
#include <gmock/gmock.h>

#include <AudioProcessorMock.h>
#include <FactoryMock.h>

#include <seeleCore/Engine.h>

namespace sz
{
    using namespace testing;

    class IntegrationTest_Engine : public testing::Test
    {
    protected:
        const std::vector<float> referenceHalf_ = {
                -0.000323403,
                -0.000338339,
                -0.000353276,
                -0.000369428,
                -0.00038558,
                 -3.35399e-05,
                 -0.000158264,
                 -0.000282988,
                 -0.000216241,
                 -0.000149494,
                 -0.000127116,
                 -0.000104738,
                 -8.58052e-05,
                 -6.68722e-05,
                 -5.05004e-05,
                 -3.41286e-05,
                 -1.69618e-05,
                2.0501e-07,
                2.59109e-05,
                5.16168e-05,
                8.58591e-05,
                0.000120102,
                0.000129097,
                0.000138092,
                0.000158421,
                0.000178751,
                0.000195121,
                0.000211492,
                0.000228632,
                0.000245773,
                0.000259384,
                0.000272995,
                0.000276934,
                0.000280873,
                0.000279339,
                0.000277804,
                0.000284668,
                0.000291532,
                0.000285323,
                0.000279114,
                0.000271898,
                0.000264682,
                0.00024962,
                0.000234557,
                0.000217298,
                0.000200039,
                0.000184492,
                0.000168945,
                0.000149443,
                0.000129941,
                0.000100791,
                7.16419e-05,
                4.77459e-05,
                2.38499e-05,
                -4.44092e-06,
                -3.27318e-05,
                -5.6918e-05,
                -8.11043e-05,
                -0.000107625,
                -0.000134147,
                -0.00016351,
                -0.000192874,
                -0.000218111,
                -0.000243349,
                -0.000262061,
                -0.000280773,
                -0.000302088,
                -0.000393961,
                -0.000402342,
                -0.000404084,
                -0.000405826,
                -0.000406395,
                -0.000406963,
                -0.000405449,
                -0.000403936,
                -0.000394194,
                -0.000384453,
                -0.000373182,
                -0.000361911,
                -0.000341833,
                -0.000321756,
                -0.000303075,
                -0.000284395,
                -0.000263571,
                -0.000242747,
                -0.00021612,
                -0.000189493,
                -0.000159937,
                -0.000130381,
                -0.000102076,
                -7.37713e-05,
                -4.29187e-05,
                -1.20662e-05,
                1.42092e-05,
                4.04846e-05,
                7.20498e-05,
                0.000103615,
                0.000133299,
                0.000162983,
                0.000187988,
                0.000212993,
                0.000235451,
                0.00025791,
                0.000278987,
                0.000300065,
                0.000316929,
                0.000333792,
                0.000350896,
                0.000367999,
                0.000374475,
                0.000380952,
                0.000385443,
                0.000389935,
                0.000392159,
                0.000394384,
                0.000392157,
                0.00038993,
                0.000382757,
                0.000375583,
                0.000364231,
                0.000352878,
                0.000334938,
                0.000316998,
                0.000302839,
                0.00028868,
                0.000268035,
                0.00024739,
                0.00022361
        };

        const std::vector<float> referenceOneFive_ = {
                -0.00106422,
                -0.000769789,
                -0.000420257,
                -5.09043e-05,
                0.000311733,
                0.000650865,
                0.000956958,
                0.00122526,
                0.00145772,
                0.00164921,
                0.00177922,
                0.00181882,
                0.00175762,
                0.00158483,
                0.00130518,
                0.00114468,
                0.000755434,
                0.000294446,
                -0.000182593,
                -0.000652722,
                -0.00110883,
                -0.00153859,
                -0.00193165,
                -0.002278,
                -0.00256413,
                -0.00275827,
                -0.00283411,
                -0.00276435,
                -0.00254342,
                -0.00217271,
                -0.00168647,
                -0.00112715,
                -0.000536404,
                4.96919e-05,
                0.000597703,
                0.00108072,
                0.00150584,
                0.00204089,
                0.00233925,
                0.00248555,
                0.00254617,
                0.0025035,
                0.00235755,
                0.00209076,
                0.00170868,
                0.00122941,
                0.00069217,
                0.000127372,
                -0.000438227,
                -0.000980056,
                -0.00148596,
                -0.00194404,
                -0.00234344,
                -0.0026549,
                -0.00286119,
                -0.0029273,
                -0.00283461,
                -0.00255299,
                -0.00211325,
                -0.00154682,
                -0.000827985,
                -0.000744755,
                -0.000316025,
                9.55417e-05,
                0.000412262,
                0.000610713,
                0.000714698,
                0.000730373,
                0.000675334,
                0.00056125,
                0.000408888,
                0.000226878,
                3.15454e-05,
                -0.000150551,
                -0.000292964,
                -0.000360654,
                -0.000335065,
                -0.000188227,
                6.14428e-05,
                0.000396858,
                0.000790068,
                0.0012374,
                0.00173986,
                0.00322017,
                0.00403183,
                0.00277485,
                0.00185861,
                0.00118817,
                0.000699063,
                0.000388714,
                0.000215175,
                0.000150225,
                0.000140768,
                0.000163071,
                0.000201191,
                0.000248348,
                0.000300429,
                0.000357402,
                0.000411443,
                0.000444915,
                0.00045104,
                0.000424775,
                0.000369008,
                0.000284887,
                0.000202147,
                0.000174889,
                0.000289891,
                -8.9078e-05,
                -0.000149805,
                -0.000123019,
                -7.78915e-05,
                -6.02116e-05,
                -9.52336e-05,
                -0.000185062,
                -0.000293762,
                -0.000389001,
                -0.00045026,
                -0.000451163,
                -0.000395517,
                -0.000289933,
                -0.000162177,
                -2.96069e-05,
                9.14504e-05,
                0.000188281,
                0.000269743,
                0.000349285,
                0.000426765,
                0.000480078
        };
    };

    TEST_F(IntegrationTest_Engine, process_lowPitched)
    {
        auto&& chopFrequency = std::atomic<float>(100);
        auto&& pitchRatio = std::atomic<float>(0.5f);

        auto&& engine = Engine(chopFrequency, pitchRatio);
        auto&& buffer = core::AudioBuffer<float>(2, 128);
        auto currentAngle = 0.f;

        auto angleDelta = (1000.f / 44100.f) * 2.f * juce::MathConstants<double>::pi;
        for(auto c = 0; c < buffer.getNumChannels(); ++c)
            for(auto i = 0; i < buffer.getNumSamples(); ++i)
            {
                buffer.setSample(c, i, std::sin(currentAngle));
                currentAngle += angleDelta;
            }

        for(auto i = 0; i < 20; ++i)
            engine.process(buffer);

        for(auto i = 0; i < buffer.getNumSamples(); ++i)
            EXPECT_NEAR(buffer[0][i], referenceHalf_[i], 0.001f);
    }

    TEST_F(IntegrationTest_Engine, process_highPitched)
    {
        auto&& chopFrequency = std::atomic<float>(100);
        auto&& pitchRatio = std::atomic<float>(1.5f);

        auto&& engine = Engine(chopFrequency, pitchRatio);
        auto&& buffer = core::AudioBuffer<float>(2, 128);
        auto&& reference = core::AudioBuffer<float>(2, 128);
        auto currentAngle = 0.f;

        auto angleDelta = (1000.f / 44100.f) * 2.f * juce::MathConstants<double>::pi;
        for(auto c = 0; c < buffer.getNumChannels(); ++c)
            for(auto i = 0; i < buffer.getNumSamples(); ++i)
            {
                buffer.setSample(c, i, std::sin(currentAngle));
                reference.setSample(c, i, std::sin(currentAngle));
                currentAngle += angleDelta;
            }
        

        for(auto i = 0; i < 20; ++i)
            engine.process(buffer);

        for(auto i = 0; i < buffer.getNumSamples(); ++i)
            EXPECT_NEAR(buffer[0][i], referenceOneFive_[i], 0.001f);
    }
}
